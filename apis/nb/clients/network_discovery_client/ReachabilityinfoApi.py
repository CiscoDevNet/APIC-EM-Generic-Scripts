#!/usr/bin/env python
#pylint: skip-file
"""
ReachabilityinfoApi.py
Copyright 2015 Reverb Technologies, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os
import urllib.request, urllib.parse, urllib.error

from .models import *


class ReachabilityinfoApi(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    
    
    def getAllNetworkDevicesReachabilityInfo(self, **kwargs):
        """Retrieves all reachability-info

        Args:
            
            scope, str: Authorization Scope for RBAC (required)
            
            
        
        Returns: NetworkDeviceReachabilityInfoNIOListResult
        """

        allParams = ['scope']

        params = locals()
        for (key, val) in list(params['kwargs'].items()):
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getAllNetworkDevicesReachabilityInfo" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/reachability-info'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        

        
        if ('scope' in params):
            headerParams['scope'] = params['scope']
        

        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'NetworkDeviceReachabilityInfoNIOListResult')
        return responseObject
        
        
        
    
    def getNetworkDevicesReachabilityInfoCount(self, **kwargs):
        """Retrieves reachability-info count

        Args:
            
            scope, str: Authorization Scope for RBAC (required)
            
            
        
        Returns: CountResult
        """

        allParams = ['scope']

        params = locals()
        for (key, val) in list(params['kwargs'].items()):
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getNetworkDevicesReachabilityInfoCount" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/reachability-info/count'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        

        
        if ('scope' in params):
            headerParams['scope'] = params['scope']
        

        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'CountResult')
        return responseObject
        
        
        
    
    def getNetworkReachabilityInfoByIpaddress(self, **kwargs):
        """Retrieves reachability-info by IP address

        Args:
            
            ipAddress, str: IP address of device (required)
            
            
            scope, str: Authorization Scope for RBAC (required)
            
            
        
        Returns: NetworkDeviceReachabilityInfoNIOResult
        """

        allParams = ['ipAddress', 'scope']

        params = locals()
        for (key, val) in list(params['kwargs'].items()):
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getNetworkReachabilityInfoByIpaddress" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/reachability-info/ip-address/{ipAddress}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        

        
        if ('scope' in params):
            headerParams['scope'] = params['scope']
        

        
        if ('ipAddress' in params):
            replacement = str(self.apiClient.toPathValue(params['ipAddress']))
            replacement = urllib.parse.quote(replacement)
            resourcePath = resourcePath.replace('{' + 'ipAddress' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'NetworkDeviceReachabilityInfoNIOResult')
        return responseObject
        
        
        
    
    def getNetworkReachabilityInfoById(self, **kwargs):
        """Retrieves reachability-info by ID

        Args:
            
            networkDeviceId, str: ID of network-device (required)
            
            
            scope, str: Authorization Scope for RBAC (required)
            
            
        
        Returns: NetworkDeviceReachabilityInfoNIOResult
        """

        allParams = ['networkDeviceId', 'scope']

        params = locals()
        for (key, val) in list(params['kwargs'].items()):
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getNetworkReachabilityInfoById" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/reachability-info/{networkDeviceId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        

        
        if ('scope' in params):
            headerParams['scope'] = params['scope']
        

        
        if ('networkDeviceId' in params):
            replacement = str(self.apiClient.toPathValue(params['networkDeviceId']))
            replacement = urllib.parse.quote(replacement)
            resourcePath = resourcePath.replace('{' + 'networkDeviceId' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'NetworkDeviceReachabilityInfoNIOResult')
        return responseObject
        
        
        
    
    def getNetworkDeviceReachabilityInfoByRange(self, **kwargs):
        """Retrieves range of reachability-info

        Args:
            
            startIndex, int: Start index (required)
            
            
            recordsToReturn, int: Number of records to return (required)
            
            
            scope, str: Authorization Scope for RBAC (required)
            
            
        
        Returns: NetworkDeviceReachabilityInfoNIOListResult
        """

        allParams = ['startIndex', 'recordsToReturn', 'scope']

        params = locals()
        for (key, val) in list(params['kwargs'].items()):
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getNetworkDeviceReachabilityInfoByRange" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/reachability-info/{startIndex}/{recordsToReturn}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        

        
        if ('scope' in params):
            headerParams['scope'] = params['scope']
        

        
        if ('startIndex' in params):
            replacement = str(self.apiClient.toPathValue(params['startIndex']))
            replacement = urllib.parse.quote(replacement)
            resourcePath = resourcePath.replace('{' + 'startIndex' + '}',
                                                replacement)
        
        if ('recordsToReturn' in params):
            replacement = str(self.apiClient.toPathValue(params['recordsToReturn']))
            replacement = urllib.parse.quote(replacement)
            resourcePath = resourcePath.replace('{' + 'recordsToReturn' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'NetworkDeviceReachabilityInfoNIOListResult')
        return responseObject
        
        
        
    


